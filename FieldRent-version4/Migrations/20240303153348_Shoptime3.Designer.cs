// <auto-generated />
using System;
using FieldRent.Data.Concrete.EfCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FieldRent.Migrations
{
    [DbContext(typeof(BlogContext))]
    [Migration("20240303153348_Shoptime3")]
    partial class Shoptime3
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FieldRent.Entity.Field", b =>
                {
                    b.Property<int>("FieldId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FieldId"));

                    b.Property<string>("FieldCoordinate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MapNumber")
                        .HasColumnType("int");

                    b.HasKey("FieldId");

                    b.ToTable("Fields");
                });

            modelBuilder.Entity("FieldRent.Entity.Map", b =>
                {
                    b.Property<int>("MapId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MapId"));

                    b.Property<int?>("FieldId")
                        .HasColumnType("int");

                    b.Property<string>("MapCondition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MapCoordinate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("MapIsActive")
                        .HasColumnType("bit");

                    b.Property<int>("MapPrice")
                        .HasColumnType("int");

                    b.Property<DateTime?>("MapStart")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("MapStop")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Time")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("MapId");

                    b.HasIndex("FieldId");

                    b.HasIndex("UserId");

                    b.ToTable("Maps");
                });

            modelBuilder.Entity("FieldRent.Entity.PurchaseHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MapId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ShoppingCartId")
                        .HasColumnType("int");

                    b.Property<int?>("Time")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MapId");

                    b.HasIndex("ShoppingCartId");

                    b.HasIndex("UserId");

                    b.ToTable("PurchaseHistories");
                });

            modelBuilder.Entity("FieldRent.Entity.Request", b =>
                {
                    b.Property<int>("RequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RequestId"));

                    b.Property<string>("RequestName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RequestPrice")
                        .HasColumnType("int");

                    b.HasKey("RequestId");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("FieldRent.Entity.ShoppingCart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("BitkiCosturan")
                        .HasColumnType("bit");

                    b.Property<bool>("Depo")
                        .HasColumnType("bit");

                    b.Property<bool>("Gubre")
                        .HasColumnType("bit");

                    b.Property<bool>("GunlukSulama")
                        .HasColumnType("bit");

                    b.Property<bool>("Hasat")
                        .HasColumnType("bit");

                    b.Property<bool>("Isıklandırma")
                        .HasColumnType("bit");

                    b.Property<bool>("Kamera")
                        .HasColumnType("bit");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("ShoppingCarts");
                });

            modelBuilder.Entity("FieldRent.Entity.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MapRequest", b =>
                {
                    b.Property<int>("MapsMapId")
                        .HasColumnType("int");

                    b.Property<int>("RequestsRequestId")
                        .HasColumnType("int");

                    b.HasKey("MapsMapId", "RequestsRequestId");

                    b.HasIndex("RequestsRequestId");

                    b.ToTable("MapRequest");
                });

            modelBuilder.Entity("FieldRent.Entity.Map", b =>
                {
                    b.HasOne("FieldRent.Entity.Field", "Field")
                        .WithMany("Maps")
                        .HasForeignKey("FieldId");

                    b.HasOne("FieldRent.Entity.User", "User")
                        .WithMany("Maps")
                        .HasForeignKey("UserId");

                    b.Navigation("Field");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FieldRent.Entity.PurchaseHistory", b =>
                {
                    b.HasOne("FieldRent.Entity.Map", "Map")
                        .WithMany()
                        .HasForeignKey("MapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FieldRent.Entity.ShoppingCart", "ShoppingCart")
                        .WithMany()
                        .HasForeignKey("ShoppingCartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FieldRent.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Map");

                    b.Navigation("ShoppingCart");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MapRequest", b =>
                {
                    b.HasOne("FieldRent.Entity.Map", null)
                        .WithMany()
                        .HasForeignKey("MapsMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FieldRent.Entity.Request", null)
                        .WithMany()
                        .HasForeignKey("RequestsRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FieldRent.Entity.Field", b =>
                {
                    b.Navigation("Maps");
                });

            modelBuilder.Entity("FieldRent.Entity.User", b =>
                {
                    b.Navigation("Maps");
                });
#pragma warning restore 612, 618
        }
    }
}
